---
title: "scAML_embedding"
format: gfm
editor: visual
bibliography: references.bib
---

# Introduction

To get some first experience with multimodal single cell data, we use the data set generated by [@granja2019]. In this studies, authors generated multimodal data including combined scRNA- and surface epitopes (CITE-seq) and scATAC seq data from healthy donor peripheral blood (PBMCs) and bone marrow mononuclear cells (BMMCs) and CD34+ enriched BMMCs. CITE-seq data was integrated and used to generate a reference map for healthy hematopoiesis. Furthermore, they used scATAC-seq to generate a reference epigenetic map of healthy hematopoiesis.

They tested the robustness and generalizability of the reference map by iteratively projection various data sets of healthy bone marrow subcompartements onto the map always confirming high agreement in subtype projection and identification.

Building on this multimodal reference map they then profile PB/BMMCs from 6 distinct patients with mixed-phenotype acute leukemia (MPAL), project this data set into the reference map and investigate associations to non-malignent cellular counterparts, differentially expressed peaks, TFs and compared them to other published single-cell leukemia data sets.

With this vignette we'll try to

1.  load the scRNA- and scATAC-seq data from the healthy samples
2.  create an seurat object and perform basic quality controls, filtering etc.
3.  perform a multimodal integration of scRNA and scATAC-seq
4.  project the MPAL data into the WNN-graph
5.  use IReNA to construct GRNs

For steps 1-4, since they are well standardized, we'll work with the seurat vignette.

# Results

## scRNA-seq

### Loading, Filtering

The GEO data set includes scRNA-seq data BMMCs, CD34+ BMMCs, PBCMs and 6 MPAL samples of which two are first diagnosis and relapse from the same patient.

scRNA-seq data are stored as a sparse matrix

```{r}
BMMC1.scRNA <- readRDS("datasets/granja_scMPAL/GSM4138872_scRNA_BMMC_D1T1.rds")
BMMC2.scRNA <- readRDS("datasets/granja_scMPAL/GSM4138873_scRNA_BMMC_D1T2.rds")
CD34_1.scRNA <- readRDS("datasets/granja_scMPAL/GSM4138874_scRNA_CD34_D2T1.rds")
CD34_2.scRNA <- readRDS("datasets/granja_scMPAL/GSM4138875_scRNA_CD34_D3T1.rds")
PBMC1.scRNA  <- readRDS("datasets/granja_scMPAL/GSM4138876_scRNA_PBMC_D4T1.rds")
PBMC2.scRNA <- readRDS("datasets/granja_scMPAL/GSM4138877_scRNA_PBMC_D4T2.rds")
```

Both objects include 20287 rows (=transcripts) from \~ 35000 single cells (identified by a common prefix (in this case "BMMC_D1T2:") and a cell UMI. The first goal would be to get this data into an seurat object.

```{r}
str(BMMC1.scRNA)
```

SeuratObject includes a CreateSeuratObject wrapper which takes 10x CellRanger input. Merging two 10x runs into a single seurat object is described [here](https://satijalab.org/seurat/articles/merge_vignette.html).

```{r}
library(Seurat)
library(dplyr)


BMMC1.scRNA.seurat <- CreateSeuratObject(counts = BMMC1.scRNA,project = "BMMC1.scRNA", assay = "RNA", names.field = 2, names.delim = ":")

BMMC2.scRNA.seurat <- CreateSeuratObject(counts = BMMC2.scRNA,project = "BMMC2.scRNA", assay = "RNA", names.field = 2, names.delim = ":")

CD34_1.scRNA.seurat <- CreateSeuratObject(counts = CD34_1.scRNA,project = "CD34_1.scRNA", assay = "RNA", names.field = 2, names.delim = ":")

CD34_2.scRNA.seurat <- CreateSeuratObject(counts = CD34_2.scRNA,project = "CD34_2.scRNA", assay = "RNA", names.field = 2, names.delim = ":")

PBMC1.scRNA.seurat <- CreateSeuratObject(counts = PBMC1.scRNA,project = "PBMC1.scRNA", assay = "RNA", names.field = 2, names.delim = ":")

PBMC2.scRNA.seurat <- CreateSeuratObject(counts = PBMC2.scRNA,project = "PBCM2.scRNA", assay = "RNA", names.field = 2, names.delim = ":")



scRNA.seurat <- merge(BMMC1.scRNA.seurat, y = c(BMMC2.scRNA.seurat, CD34_1.scRNA.seurat, CD34_2.scRNA.seurat, PBMC1.scRNA.seurat, PBMC2.scRNA.seurat), add.cell.ids = c("BMMC1", "BMMC2", "CD34_1", "CD34_2", "PBMC1", "PBMC2"), project = "MPAL.scRNA")
```

Lets have a first glimpse into out newly generated seurat object. We can access the assays data by using \[\["assay"\]\].

```{r}
glimpse(head(scRNA.seurat[["RNA"]]@counts, 5))
```

Some cell-wise meta data is automatically calculated during the creation of the seurat object.

```{r}
head(scRNA.seurat@meta.data, 5)
```

Basic metrics include number of total counts per cell (nCount_RNA) and number of non-zero features (nFeature_RNA) per cell. This helps to identify cells with very low (\<200) or very high (\>25.000) unique features, the former being dead and the latter duplicated cells. In principal, we could identify cells with high (\>5%) mitochondrial counts which is also a feature of low-quality samples by adding a new meta data column. However, mitochondrial and ribosomal genes were already filtered out by the authors.

```{r}
rownames(scRNA.seurat) %>% grepl(pattern = "^MT-") %>% any()
```

```{r}
scRNA.seurat[["percent.mt"]] <- PercentageFeatureSet(scRNA.seurat, pattern = "^MT-")

VlnPlot(scRNA.seurat, features = c("nCount_RNA", "nFeature_RNA", "percent.mt"))
```

```{r}
FeatureScatter(scRNA.seurat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
```

The authors set the QC filtering threshold to remove cells with less than 400 detected genes (features) and less than 1000 counts (UMIs) as well as above 10.000 counts (UMIs). As shown by the violin plot, this filtering was already applied to the data set.

```{r}
scRNA.seurat <- subset(scRNA.seurat, nFeature_RNA > 400 & nCount_RNA > 1000 & nCount_RNA < 10000)
```

### Normalization

The default normalization of scaling to 10.000 depth followed by log2 (n+1) normalization was also used by the authors in the manuscript.

```{r}
scRNA.seurat <- NormalizeData(scRNA.seurat, normalization.method = "LogNormalize", scale.factor = 1000)
```

### Variable Feature Detection and PCA

We detect the top 3000 most variable features (genes) to later use as input for dimensionality reduction and visualization

```{r}
scRNA.seurat <- FindVariableFeatures(scRNA.seurat, selection.method = "vst", nfeatures = 3000)
```

```{r}
VariableFeatures(scRNA.seurat) %>% head(20)
```

We next scale feature-wise to make sure that gene expression is not the main driver of variance. We scale all features instead of only the 3000 most variable ones.

```{r}
scRNA.seurat <- ScaleData(scRNA.seurat, features = rownames(scRNA.seurat))
```

The scaled data matrix can be accessed

```{r}
scRNA.seurat[["RNA"]]@scale.data[1:10, 1:10]
```

```{r}
scRNA.seurat <- RunPCA(scRNA.seurat, features = VariableFeatures(scRNA.seurat))
```

```{r}
DimPlot(scRNA.seurat, reduction = "pca")
```

### Determining Data Set Dimensionality

```{r}
scRNA.seurat <- JackStraw(scRNA.seurat, num.replicate = 100, dims = 100)
```

```{r}
scRNA.seurat <- ScoreJackStraw(scRNA.seurat, dims = 1:50)
```

```{r}
JackStrawPlot(scRNA.seurat, dims = 1:50)
```

From the jackstraw plot it appears that PCs 1:45 are the most informative.

```{r}
ElbowPlot(scRNA.seurat, ndims = 50)
```

### Visualization

First, we identify clusters/communities based on the KNN graph.

```{r}
scRNA.seurat <- FindNeighbors(scRNA.seurat, dims = 1:45)
scRNA.seurat <- FindClusters(scRNA.seurat, resolution = 0.3)
```

And visualize the data set using UMAP

```{r}

cols = DiscretePalette(n = 25)

scRNA.seurat <- RunUMAP(scRNA.seurat, dims = 1:50, n.neighbors = 35, min.dist = 0.45)
DimPlot(scRNA.seurat, reduction = "umap", cols = cols)
```

### Find Marker Genes

We can use the seurat function FindAllMarkers to identify the top DE markers per any of the cluster compared to all other cells. We can further filter these to only show the top up-regulated ones.

```{r}
scRNA.cluster_markers <- FindAllMarkers(scRNA.seurat, only.pos = T, min.pct = 0.25, logfc.threshold = 0.25)


```

Semi-automatic cell type annotation is performed using [SingleR](https://bioconductor.org/packages/devel/bioc/vignettes/SingleR/inst/doc/SingleR.html) and the [celldex](https://bioconductor.org/packages/3.17/data/experiment/html/celldex.html) reference sets.

```{r}


```

# Saving/Loading HDF5

```{r}
SeuratDisk::SaveH5Seurat(scRNA.seurat, overwrite = T)
rm(scRNA.seurat)
scRNA.seurat <- SeuratDisk::LoadH5Seurat(file = "MPAL.scRNA.h5Seurat")
```
